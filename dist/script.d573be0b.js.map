{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","js/script.js"],"names":["categoryBtn","document","querySelectorAll","searchBtn","getElementById","searchInput","recipeContainer","closeBtn","forEach","categoryItem","addEventListener","categoryClick","searchBtnClick","viewRecipe","closeModal","e","categoryName","target","innerText","toLowerCase","getRecipesByCategory","preventDefault","fetch","response","json","data","meals","slice","html","meal","idMeal","strMealThumb","strMeal","innerHTML","resultContainer","getRecipeBySearchTerm","value","searchTerm","searchResponse","classList","contains","recipeItem","parentElement","dataset","id","item","mealRecipeModal","modalContainer","modalContent","ingredients","i","push","console","log","strYoutube","instructions","strInstructions","strArea","map","ingredient","join","split","add","body","style","overflow","remove","className","icon","message","msgContainer","setTimeout","alert","querySelector","footerText","footer","date","Date","getFullYear"],"mappings":"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":"script.d573be0b.js","sourceRoot":"..\\src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { async } from 'regenerator-runtime/runtime';\r\n\r\n//Select containers, inputs & buttons\r\nconst categoryBtn = document.querySelectorAll('#categoryBtn');\r\nconst searchBtn = document.getElementById('searchBtn');\r\nconst searchInput = document.getElementById('searchInput');\r\nconst recipeContainer = document.getElementById('recipeContainer');\r\nconst closeBtn = document.getElementById('closeBtn');\r\n\r\n//Get event listeners\r\ncategoryBtn.forEach((categoryItem) => categoryItem.addEventListener('click', categoryClick));\r\nsearchBtn.addEventListener('click', searchBtnClick);\r\nrecipeContainer.addEventListener('click', viewRecipe);\r\ncloseBtn.addEventListener('click', closeModal);\r\n\r\n//Handle Category Click\r\nfunction categoryClick(e) {\r\n  const categoryName = e.target.innerText.toLowerCase();\r\n  getRecipesByCategory(categoryName);\r\n  e.preventDefault();\r\n}\r\n\r\n//Get the data for the selected category\r\nasync function getRecipesByCategory(categoryName) {\r\n  try {\r\n    const response = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${categoryName}`);\r\n    const data = await response.json();\r\n    const meals = data.meals.slice(0, 10);\r\n    let html = '';\r\n\r\n    if (meals) {\r\n      meals.forEach((meal) => {\r\n        html += `\r\n      <div class=\"recipeItem\" data-id=\"${meal.idMeal}\">\r\n        <img src=\"${meal.strMealThumb}\" alt=\"\" />\r\n        <div class=\"recipeContent\">\r\n          <h2>${meal.strMeal}</h2>\r\n          <button id=\"viewRecipeBtn\" class=\"viewRecipeBtn\" href=\"#\">View Recipe</button>\r\n        </div>\r\n      </div>\r\n      `;\r\n      });\r\n      recipeContainer.innerHTML = html;\r\n    }\r\n    resultContainer('successMsg', '<i class=\"fa-solid fa-circle-check\"></i>', `Search Results for ${categoryName}`);\r\n  } catch {\r\n    recipeContainer.innerHTML = ``;\r\n    resultContainer('errorMsg', '<i class=\"fa-solid fa-triangle-exclamation\"></i>', 'No Data For The Entered Search Query.');\r\n  }\r\n}\r\n\r\n//Handle search button click\r\nfunction searchBtnClick(e) {\r\n  e.preventDefault();\r\n  getRecipeBySearchTerm(searchInput.value.toLowerCase());\r\n}\r\n\r\n//Get the data for the searched recipe\r\nasync function getRecipeBySearchTerm(searchTerm) {\r\n  try {\r\n    const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${searchTerm}`);\r\n    const data = await response.json();\r\n    const searchResponse = data.meals.slice(0, 10);\r\n    let html = '';\r\n\r\n    if (searchResponse) {\r\n      searchResponse.forEach((meal) => {\r\n        html += `\r\n      <div class=\"recipeItem\" data-id=\"${meal.idMeal}\">\r\n        <img src=\"${meal.strMealThumb}\" alt=\"Picture of Recipe\" />\r\n        <div class=\"recipeContent\">\r\n          <h2>${meal.strMeal}</h2>\r\n          <button id=\"viewRecipeBtn\" class=\"viewRecipeBtn\" href=\"#\">View Recipe</button>\r\n        </div>\r\n      </div>\r\n      `;\r\n      });\r\n      resultContainer('successMsg', '<i class=\"fa-solid fa-badge-check\"></i>', `Search Results for ${searchTerm}`);\r\n      recipeContainer.innerHTML = html;\r\n    }\r\n  } catch {\r\n    recipeContainer.innerHTML = ``;\r\n    resultContainer('errorMsg', '<i class=\"fa-solid fa-triangle-exclamation\"></i>', 'No Data For The Entered Search Query.');\r\n  }\r\n}\r\n\r\n//Get the data for the selected recipe\r\nasync function viewRecipe(e) {\r\n  if (e.target.classList.contains('viewRecipeBtn')) {\r\n    let recipeItem = e.target.parentElement.parentElement;\r\n\r\n    const response = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${recipeItem.dataset.id}`);\r\n    const data = await response.json();\r\n    const item = data.meals;\r\n\r\n    mealRecipeModal(item);\r\n  }\r\n  e.preventDefault();\r\n}\r\n\r\n//Display Modal Content\r\nfunction mealRecipeModal(item) {\r\n  let modalContainer = document.getElementById('modalContainer');\r\n  let modalContent = document.getElementById('modalContent');\r\n  const ingredients = [];\r\n  item = item[0];\r\n  for (let i = 1; i <= 20; i++) {\r\n    if (item[`strIngredient${i}`]) {\r\n      ingredients.push(`${item[`strMeasure${i}`]} - ${item[`strIngredient${i}`]}`);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  console.log(item.strYoutube);\r\n  const instructions = item.strInstructions;\r\n  let html = `\r\n  <h2>${item.strMeal}</h2>\r\n  <p><span>Cuisine: </span>${item.strArea}</p>\r\n  <img src=\"${item.strMealThumb}\" alt=\"Picture of Recipe\"/>\r\n  <h3>Ingredients:</h3>\r\n  <ul>\r\n    ${ingredients.map((ingredient) => `<li>${ingredient}</li>`).join('')}\r\n  </ul>\r\n  <h3>Directions:</h3>\r\n  <p>${instructions.split('.').join('. <br/> <br/>')}</p>\r\n  <h3>Watch Recipe:</h3>\r\n  <div class=\"videoContainer\">\r\n    <iframe class=\"recipeVideo\" src=\"https://www.youtube.com/embed/${item.strYoutube.slice(-11)}\" allow=\"fullscreen;\"></iframe>\r\n  </div>\r\n  `;\r\n\r\n  modalContent.innerHTML = html;\r\n\r\n  modalContainer.classList.add('showModal');\r\n  document.body.style.overflow = 'hidden';\r\n}\r\n\r\n//Close The Modal\r\nfunction closeModal(e) {\r\n  let modalContainer = document.getElementById('modalContainer');\r\n  modalContainer.classList.remove('showModal');\r\n  document.body.style.overflow = 'scroll';\r\n  e.preventDefault();\r\n}\r\n\r\n//Notification for Search Result\r\nfunction resultContainer(className, icon, message) {\r\n  let msgContainer = document.getElementById('msgContainer');\r\n  msgContainer.innerHTML = `\r\n    <p class='alert ${className}'>${icon} ${message}</p>\r\n  `;\r\n\r\n  setTimeout(function () {\r\n    let alert = document.querySelector('.alert');\r\n    alert.remove();\r\n    msgContainer.innerHTML = '';\r\n  }, 5000);\r\n}\r\n\r\n//Footer Content\r\nfunction footerText() {\r\n  let footer = document.getElementById('footerContainer');\r\n  let date = new Date().getFullYear();\r\n\r\n  footer.innerHTML = `\r\n  <p>Designed & Developed by Trevin Shu &copy; ${date}</p>\r\n  `;\r\n}\r\n\r\nfooterText();\r\n"]}